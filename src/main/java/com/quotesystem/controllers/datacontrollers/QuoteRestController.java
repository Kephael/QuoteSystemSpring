package com.quotesystem.controllers.datacontrollers;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import com.quotesystem.counter.CounterService;
import com.quotesystem.form.Quote;
import com.quotesystem.form.QuoteRepository;

@RestController
@RequestMapping("/quote")
public class QuoteRestController {

	@Autowired
	private QuoteRepository quoteRepository;
	@Autowired
	private CounterService counterService;


	/*
	 * Inserts a new quote which has been received at /quote and inserts it into the database
	 */
	@RequestMapping(method = RequestMethod.POST, consumes = "application/json")
	public Quote submitNewQuote(@RequestBody Quote quote) {
		if (quote.getQuestions() != null) {
			quote.calculateTotalQuoteValue(); // evaluate quote prior to submission into database
		}
		Authentication auth = SecurityContextHolder.getContext().getAuthentication();
		quote.setUsername(auth.getName()); // sets quote username to that of the user logged in
		if (quote.getIdentity() == 0) {
			quote.setIdentity(counterService.getNextSequence("quote"));
		}
		return quoteRepository.save(quote);
	}

	/*
	 * Retrieves an existing quote to the client at /quote/view/{id}
	 */
	@RequestMapping(value = "/view/{identity}", method = RequestMethod.GET)
	public @ResponseBody Quote getExistingQuote(@PathVariable Long identity) {
		return quoteRepository.findByIdentity(identity);
	}

	/*
	 * Retrieves a list of quotes generated by a specified user at /quote/search/{username}
	 */
	@RequestMapping(value = "/search/{username}", method = RequestMethod.GET)
	public @ResponseBody List<Quote> getQuotesByUsername(@PathVariable String username) {
		return quoteRepository.findByUsername(username);
	}

	@RequestMapping(value = "/delete/{identity}", method = RequestMethod.PUT)
	public @ResponseBody Long deleteExistingQuote(@PathVariable Long identity) {
		return quoteRepository.deleteByIdentity(identity);
	}

}
